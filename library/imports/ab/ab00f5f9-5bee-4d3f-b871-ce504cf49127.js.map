{"version":3,"sources":["../../../../../assets/Script/utils/assets/Script/utils/threedes.js"],"names":["des","key","message","encrypt","mode","iv","padding","spfunction1","Array","spfunction2","spfunction3","spfunction4","spfunction5","spfunction6","spfunction7","spfunction8","keys","des_createKeys","m","i","j","temp","temp2","right1","right2","left","right","looping","cbcleft","cbcleft2","cbcright","cbcright2","endloop","loopinc","len","length","chunk","iterations","String","fromCharCode","result","tempresult","charCodeAt","replace","pc2bytes0","pc2bytes1","pc2bytes2","pc2bytes3","pc2bytes4","pc2bytes5","pc2bytes6","pc2bytes7","pc2bytes8","pc2bytes9","pc2bytes10","pc2bytes11","pc2bytes12","pc2bytes13","shifts","lefttemp","righttemp","n","pad","genkey","slice","vector","chars_from_hex","inputstr","outputstr","split","parseInt","hex_from_chars","delimiter","hex","inputarr","encrypt_string","input","output","decrypt_string"],"mappings":"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","file":"threedes.js","sourceRoot":"../../../../../assets/Script/utils","sourcesContent":["/**\n * Created by ningjian on 2016/5/3.\n */\n//算法源码\n//Paul Tero, July 2001\n//http://www.tero.co.uk/des/\n//\n//Optimised for performance with large blocks by Michael Hayworth, November 2001\n//http://www.netdealing.com\n//\n//THIS SOFTWARE IS PROVIDED \"AS IS\" AND\n//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n//ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n//FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n//DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n//OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n//HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n//LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n//OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n//SUCH DAMAGE.\n\n//des\n//this takes the key, the message, and whether to encrypt or decrypt\nfunction des (key, message, encrypt, mode, iv, padding) {\n    //declaring this locally speeds things up a bit\n    var spfunction1 = new Array (0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004);\n    var spfunction2 = new Array (-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000);\n    var spfunction3 = new Array (0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200);\n    var spfunction4 = new Array (0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080);\n    var spfunction5 = new Array (0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100);\n    var spfunction6 = new Array (0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010);\n    var spfunction7 = new Array (0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002);\n    var spfunction8 = new Array (0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000);\n\n    //create the 16 or 48 subkeys we will need\n    var keys = des_createKeys (key);\n    var m=0, i, j, temp, temp2, right1, right2, left, right, looping;\n    var cbcleft, cbcleft2, cbcright, cbcright2\n    var endloop, loopinc;\n    var len = message.length;\n    var chunk = 0;\n    //set up the loops for single and triple des\n    var iterations = keys.length == 32 ? 3 : 9; //single or triple des\n    if (iterations == 3) {looping = encrypt ? new Array (0, 32, 2) : new Array (30, -2, -2);}\n    else {looping = encrypt ? new Array (0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array (94, 62, -2, 32, 64, 2, 30, -2, -2);}\n\n    //pad the message depending on the padding parameter\n    if (padding == 2) message += \"        \"; //pad the message with spaces\n    else if (padding == 1) {temp = 8-(len%8); message += String.fromCharCode (temp,temp,temp,temp,temp,temp,temp,temp); if (temp==8) len+=8;} //PKCS7 padding\n    else if (!padding) message += \"\\0\\0\\0\\0\\0\\0\\0\\0\"; //pad the message out with null bytes\n\n    //store the result here\n    result = \"\";\n    tempresult = \"\";\n\n    if (mode == 1) { //CBC mode\n        cbcleft = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n        cbcright = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n        m=0;\n    }\n\n    //loop through each 64 bit chunk of the message\n    while (m < len) {\n        left = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n        right = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n\n        //for Cipher Block Chaining mode, xor the message with the previous result\n        if (mode == 1) {if (encrypt) {left ^= cbcleft; right ^= cbcright;} else {cbcleft2 = cbcleft; cbcright2 = cbcright; cbcleft = left; cbcright = right;}}\n\n        //first each 64 but chunk of the message must be permuted according to IP\n        temp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n        temp = ((left >>> 16) ^ right) & 0x0000ffff; right ^= temp; left ^= (temp << 16);\n        temp = ((right >>> 2) ^ left) & 0x33333333; left ^= temp; right ^= (temp << 2);\n        temp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n        temp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\n        left = ((left << 1) | (left >>> 31));\n        right = ((right << 1) | (right >>> 31));\n\n        //do this either 1 or 3 times for each chunk of the message\n        for (j=0; j<iterations; j+=3) {\n            endloop = looping[j+1];\n            loopinc = looping[j+2];\n            //now go through and perform the encryption or decryption\n            for (i=looping[j]; i!=endloop; i+=loopinc) { //for efficiency\n                right1 = right ^ keys[i];\n                right2 = ((right >>> 4) | (right << 28)) ^ keys[i+1];\n                //the result is attained by passing these bytes through the S selection functions\n                temp = left;\n                left = right;\n                right = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f]\n                    | spfunction6[(right1 >>>  8) & 0x3f] | spfunction8[right1 & 0x3f]\n                    | spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) & 0x3f]\n                    | spfunction5[(right2 >>>  8) & 0x3f] | spfunction7[right2 & 0x3f]);\n            }\n            temp = left; left = right; right = temp; //unreverse left and right\n        } //for either 1 or 3 iterations\n\n        //move then each one bit to the right\n        left = ((left >>> 1) | (left << 31));\n        right = ((right >>> 1) | (right << 31));\n\n        //now perform IP-1, which is IP in the opposite direction\n        temp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n        temp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n        temp = ((right >>> 2) ^ left) & 0x33333333; left ^= temp; right ^= (temp << 2);\n        temp = ((left >>> 16) ^ right) & 0x0000ffff; right ^= temp; left ^= (temp << 16);\n        temp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\n        //for Cipher Block Chaining mode, xor the message with the previous result\n        if (mode == 1) {if (encrypt) {cbcleft = left; cbcright = right;} else {left ^= cbcleft2; right ^= cbcright2;}}\n        tempresult += String.fromCharCode ((left>>>24), ((left>>>16) & 0xff), ((left>>>8) & 0xff), (left & 0xff), (right>>>24), ((right>>>16) & 0xff), ((right>>>8) & 0xff), (right & 0xff));\n\n        chunk += 8;\n        if (chunk == 512) {result += tempresult; tempresult = \"\"; chunk = 0;}\n    } //for every 8 characters, or 64 bits in the message\n\n    //return the result as an array\n    result += tempresult;\n    result = result.replace(/\\0*$/g, \"\");\n    return result;\n} //end of des\n\n\n\n//des_createKeys\n//this takes as input a 64 bit key (even though only 56 bits are used)\n//as an array of 2 integers, and returns 16 48 bit keys\nfunction des_createKeys (key) {\n    //declaring this locally speeds things up a bit\n    pc2bytes0  = new Array (0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204);\n    pc2bytes1  = new Array (0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101);\n    pc2bytes2  = new Array (0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808);\n    pc2bytes3  = new Array (0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000);\n    pc2bytes4  = new Array (0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010);\n    pc2bytes5  = new Array (0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420);\n    pc2bytes6  = new Array (0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002);\n    pc2bytes7  = new Array (0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800);\n    pc2bytes8  = new Array (0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002);\n    pc2bytes9  = new Array (0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408);\n    pc2bytes10 = new Array (0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020);\n    pc2bytes11 = new Array (0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200);\n    pc2bytes12 = new Array (0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010);\n    pc2bytes13 = new Array (0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105);\n\n    //how many iterations (1 for des, 3 for triple des)\n    var iterations = key.length > 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n    //stores the return keys\n    var keys = new Array (32 * iterations);\n    //now define the left shifts which need to be done\n    var shifts = new Array (0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);\n    //other variables\n    var lefttemp, righttemp, m=0, n=0, temp;\n\n    for (var j=0; j<iterations; j++) { //either 1 or 3 iterations\n        left = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n        right = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\n        temp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n        temp = ((right >>> -16) ^ left) & 0x0000ffff; left ^= temp; right ^= (temp << -16);\n        temp = ((left >>> 2) ^ right) & 0x33333333; right ^= temp; left ^= (temp << 2);\n        temp = ((right >>> -16) ^ left) & 0x0000ffff; left ^= temp; right ^= (temp << -16);\n        temp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n        temp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n        temp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\n        //the right side needs to be shifted and to get the last four bits of the left side\n        temp = (left << 8) | ((right >>> 20) & 0x000000f0);\n        //left needs to be put upside down\n        left = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);\n        right = temp;\n\n        //now go through and perform these shifts on the left and right keys\n        for (i=0; i < shifts.length; i++) {\n            //shift the keys either one or two bits to the left\n            if (shifts[i]) {left = (left << 2) | (left >>> 26); right = (right << 2) | (right >>> 26);}\n            else {left = (left << 1) | (left >>> 27); right = (right << 1) | (right >>> 27);}\n            left &= -0xf; right &= -0xf;\n\n            //now apply PC-2, in such a way that E is easier when encrypting or decrypting\n            //this conversion will look like PC-2 except only the last 6 bits of each byte are used\n            //rather than 48 consecutive bits and the order of lines will be according to\n            //how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n            lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf]\n                | pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf]\n                | pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf]\n                | pc2bytes6[(left >>> 4) & 0xf];\n            righttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf]\n                | pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf]\n                | pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf]\n                | pc2bytes13[(right >>> 4) & 0xf];\n            temp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;\n            keys[n++] = lefttemp ^ temp; keys[n++] = righttemp ^ (temp << 16);\n        }\n    } //for each iterations\n    //return the keys we've created\n    return keys;\n} //end of des_createKeys\nfunction pad(key) {\n    for (var i = key.length; i<24; i++) {\n        key+=\"0\";\n    }\n    return key;\n}\nfunction genkey(key) {\n    //8 byte / 64 bit Key (DES) or 192 bit Key\n    return {key:pad(key.slice(0,48)),vector:key.slice(48,64)};\n}\nfunction chars_from_hex(inputstr) {\n    var outputstr = '';\n    inputstr = inputstr.replace(/^(0x)?/g, '');\n    inputstr = inputstr.replace(/[^A-Fa-f0-9]/g, '');\n    inputstr = inputstr.split('');\n    for(var i=0; i<inputstr.length; i+=2) {\n        outputstr += String.fromCharCode(parseInt(inputstr[i]+''+inputstr[i+1], 16));\n    }\n    return outputstr;\n}\nfunction hex_from_chars(inputstr) {\n    var delimiter = '';\n    var outputstr = '';\n    var hex = \"0123456789abcdef\";\n    hex = hex.split('');\n    var i, n;\n    var inputarr = inputstr.split('');\n    for(var i=0; i<inputarr.length; i++) {\n        if(i > 0) outputstr += delimiter;\n        if(!delimiter && i % 32 == 0 && i > 0) outputstr += '\\n';\n        n = inputstr.charCodeAt(i);\n        outputstr += hex[(n >> 4) & 0xf] + hex[n & 0xf];\n    }\n    return outputstr;\n}\n//用法封装\n//加密\nfunction encrypt_string(key,input) {\n    key = chars_from_hex(genkey(key).key);\n    var output = des(key,input,1,0,0,genkey(key).vector);\n    return hex_from_chars(output);\n}\n//解密\nfunction decrypt_string(key,input) {\n    key = chars_from_hex(genkey(key).key);\n    input = chars_from_hex(input);\n    return des(key, input,0,0,0,genkey(key).vector);\n}"]}